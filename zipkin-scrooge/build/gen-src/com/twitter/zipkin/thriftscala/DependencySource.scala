/**
 * Generated by Scrooge
 *   version: 4.0.0
 *   rev: 2d9d7656d3b3b7eff89450ac6a78f12af6cc627b
 *   built at: 20150828-134418
 */
package com.twitter.zipkin.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftService, ThriftStruct,
  ThriftStructCodec, ThriftStructCodec3,
  ThriftStructFieldInfo, ThriftResponse, ThriftUtil}
import com.twitter.finagle.thrift.{Protocols, ThriftClientRequest, ThriftServiceIface}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait DependencySource[+MM[_]] extends ThriftService {
  /**
       * Get an aggregate representation of all services paired with every service they call in to.
       * This includes information on call counts and mean/stdDev/etc of call durations.  The two arguments
       * specify epoch time in microseconds. The end time is optional and defaults to one day after the
       * start time.
       */
  def getDependencies(startTime: Option[Long] = None, endTime: Option[Long] = None): MM[com.twitter.zipkin.thriftscala.Dependencies]
}



object DependencySource { self =>
  case class ServiceIface(
      getDependencies : com.twitter.finagle.Service[self.GetDependencies.Args, self.GetDependencies.Result]
  ) extends __ServiceIface

  // This is needed to support service inheritance.
  trait __ServiceIface  {
    def getDependencies : com.twitter.finagle.Service[self.GetDependencies.Args, self.GetDependencies.Result]
  }

  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        pf: TProtocolFactory = Protocols.binaryFactory(),
        stats: com.twitter.finagle.stats.StatsReceiver
      ): ServiceIface =
        new ServiceIface(
          getDependencies = ThriftServiceIface(self.GetDependencies, binaryService, pf, stats)
      )
  }

  class MethodIface(serviceIface: __ServiceIface)
    extends DependencySource[Future] {
    private[this] val __getDependencies_service =
      ThriftServiceIface.resultFilter(self.GetDependencies) andThen serviceIface.getDependencies
    def getDependencies(startTime: Option[Long] = None, endTime: Option[Long] = None): Future[com.twitter.zipkin.thriftscala.Dependencies] =
      __getDependencies_service(self.GetDependencies.Args(startTime, endTime))
  }

  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, DependencySource[Future]] {
    def newMethodIface(serviceIface: ServiceIface): DependencySource[Future] =
      new MethodIface(serviceIface)
  }

  object GetDependencies extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getDependencies_args")
      val StartTimeField = new TField("start_time", TType.I64, 1)
      val StartTimeFieldManifest = implicitly[Manifest[Long]]
      val EndTimeField = new TField("end_time", TType.I64, 2)
      val EndTimeFieldManifest = implicitly[Manifest[Long]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          StartTimeField,
          true,
          false,
          StartTimeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          EndTimeField,
          true,
          false,
          EndTimeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          startTime =
            {
              val field = original.startTime
              field.map { field =>
                field
              }
            },
          endTime =
            {
              val field = original.endTime
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var startTime: _root_.scala.Option[Long] = _root_.scala.None
        var endTime: _root_.scala.Option[Long] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.I64 =>
                    startTime = _root_.scala.Some(readStartTimeValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'startTime' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I64 =>
                    endTime = _root_.scala.Some(readEndTimeValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'endTime' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          startTime,
          endTime,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        startTime: _root_.scala.Option[Long] = _root_.scala.None,
        endTime: _root_.scala.Option[Long] = _root_.scala.None
      ): Args =
        new Args(
          startTime,
          endTime
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[Option[Long], Option[Long]]] = _root_.scala.Some(_item)
    
    
      @inline private def readStartTimeValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeStartTimeField(startTime_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(StartTimeField)
        writeStartTimeValue(startTime_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeStartTimeValue(startTime_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(startTime_item)
      }
    
      @inline private def readEndTimeValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeEndTimeField(endTime_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(EndTimeField)
        writeEndTimeValue(endTime_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeEndTimeValue(endTime_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(endTime_item)
      }
    
    
    }
    
    class Args(
        val startTime: _root_.scala.Option[Long],
        val endTime: _root_.scala.Option[Long],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[Option[Long], Option[Long]]
      with java.io.Serializable
    {
      import Args._
      def this(
        startTime: _root_.scala.Option[Long] = _root_.scala.None,
        endTime: _root_.scala.Option[Long] = _root_.scala.None
      ) = this(
        startTime,
        endTime,
        Map.empty
      )
    
      def _1 = startTime
      def _2 = endTime
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (startTime.isDefined) writeStartTimeField(startTime.get, _oprot)
        if (endTime.isDefined) writeEndTimeField(endTime.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        startTime: _root_.scala.Option[Long] = this.startTime,
        endTime: _root_.scala.Option[Long] = this.endTime,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          startTime,
          endTime,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.startTime
        case 1 => this.endTime
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.twitter.zipkin.thriftscala.Dependencies
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getDependencies_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.Dependencies]]
      val QeField = new TField("qe", TType.STRUCT, 1)
      val QeFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.DependenciesException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          QeField,
          true,
          false,
          QeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.twitter.zipkin.thriftscala.Dependencies.withoutPassthroughFields(field)
              }
            },
          qe =
            {
              val field = original.qe
              field.map { field =>
                com.twitter.zipkin.thriftscala.DependenciesException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.twitter.zipkin.thriftscala.Dependencies] = _root_.scala.None
        var qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    qe = _root_.scala.Some(readQeValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'qe' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          qe,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.twitter.zipkin.thriftscala.Dependencies] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          qe
        )
    
      def unapply(_item: Result): _root_.scala.Option[scala.Product2[Option[com.twitter.zipkin.thriftscala.Dependencies], Option[com.twitter.zipkin.thriftscala.DependenciesException]]] = _root_.scala.Some(_item)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.Dependencies = {
        com.twitter.zipkin.thriftscala.Dependencies.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.twitter.zipkin.thriftscala.Dependencies, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.twitter.zipkin.thriftscala.Dependencies, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
      @inline private def readQeValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.DependenciesException = {
        com.twitter.zipkin.thriftscala.DependenciesException.decode(_iprot)
      }
    
      @inline private def writeQeField(qe_item: com.twitter.zipkin.thriftscala.DependenciesException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(QeField)
        writeQeValue(qe_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeQeValue(qe_item: com.twitter.zipkin.thriftscala.DependenciesException, _oprot: TProtocol): Unit = {
        qe_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.twitter.zipkin.thriftscala.Dependencies],
        val qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.twitter.zipkin.thriftscala.Dependencies] with ThriftStruct
      with scala.Product2[Option[com.twitter.zipkin.thriftscala.Dependencies], Option[com.twitter.zipkin.thriftscala.DependenciesException]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.twitter.zipkin.thriftscala.Dependencies] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException] = _root_.scala.None
      ) = this(
        success,
        qe,
        Map.empty
      )
    
      def _1 = success
      def _2 = qe
    
      def successField: Option[com.twitter.zipkin.thriftscala.Dependencies] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(qe)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (qe.isDefined) writeQeField(qe.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.twitter.zipkin.thriftscala.Dependencies] = this.success,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException] = this.qe,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          qe,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.qe
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    val name = "getDependencies"
    val serviceName = "DependencySource"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getDependencies$args = GetDependencies.Args
  type getDependencies$args = GetDependencies.Args

  val getDependencies$result = GetDependencies.Result
  type getDependencies$result = GetDependencies.Result


  trait FutureIface extends DependencySource[Future] {
    /**
         * Get an aggregate representation of all services paired with every service they call in to.
         * This includes information on call counts and mean/stdDev/etc of call durations.  The two arguments
         * specify epoch time in microseconds. The end time is optional and defaults to one day after the
         * start time.
         */
    def getDependencies(startTime: Option[Long] = None, endTime: Option[Long] = None): Future[com.twitter.zipkin.thriftscala.Dependencies]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "DependencySource",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver)
    extends DependencySource$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats)
    with FutureIface

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends DependencySource$FinagleService(
      iface,
      protocolFactory)
}