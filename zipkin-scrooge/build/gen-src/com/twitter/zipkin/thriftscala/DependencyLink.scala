/**
 * Generated by Scrooge
 *   version: 4.0.0
 *   rev: 2d9d7656d3b3b7eff89450ac6a78f12af6cc627b
 *   built at: 20150828-134418
 */
package com.twitter.zipkin.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object DependencyLink extends ThriftStructCodec3[DependencyLink] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("DependencyLink")
  val ParentField = new TField("parent", TType.STRING, 1)
  val ParentFieldManifest = implicitly[Manifest[String]]
  val ChildField = new TField("child", TType.STRING, 2)
  val ChildFieldManifest = implicitly[Manifest[String]]
  val DurationMomentsField = new TField("duration_moments", TType.STRUCT, 3)
  val DurationMomentsFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.Moments]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ParentField,
      false,
      false,
      ParentFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      ChildField,
      false,
      false,
      ChildFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      DurationMomentsField,
      false,
      false,
      DurationMomentsFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: DependencyLink): Unit = {
  }

  def withoutPassthroughFields(original: DependencyLink): DependencyLink =
    new Immutable(
      parent =
        {
          val field = original.parent
          field
        },
      child =
        {
          val field = original.child
          field
        },
      durationMoments =
        {
          val field = original.durationMoments
          com.twitter.zipkin.thriftscala.Moments.withoutPassthroughFields(field)
        }
    )

  override def encode(_item: DependencyLink, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): DependencyLink = {

    var parentOffset: Int = -1
    var childOffset: Int = -1
    var durationMoments: com.twitter.zipkin.thriftscala.Moments = null

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                parentOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'parent' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                childOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'child' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                durationMoments = readDurationMomentsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'durationMoments' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      parentOffset,
      childOffset,
      durationMoments,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): DependencyLink =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): DependencyLink = {
    var parent: String = null
    var child: String = null
    var durationMoments: com.twitter.zipkin.thriftscala.Moments = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                parent = readParentValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'parent' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                child = readChildValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'child' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
                durationMoments = readDurationMomentsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'durationMoments' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      parent,
      child,
      durationMoments,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    parent: String,
    child: String,
    durationMoments: com.twitter.zipkin.thriftscala.Moments
  ): DependencyLink =
    new Immutable(
      parent,
      child,
      durationMoments
    )

  def unapply(_item: DependencyLink): _root_.scala.Option[scala.Product3[String, String, com.twitter.zipkin.thriftscala.Moments]] = _root_.scala.Some(_item)


  @inline private def readParentValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeParentField(parent_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ParentField)
    writeParentValue(parent_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeParentValue(parent_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(parent_item)
  }

  @inline private def readChildValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeChildField(child_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ChildField)
    writeChildValue(child_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeChildValue(child_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(child_item)
  }

  @inline private def readDurationMomentsValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.Moments = {
    com.twitter.zipkin.thriftscala.Moments.decode(_iprot)
  }

  @inline private def writeDurationMomentsField(durationMoments_item: com.twitter.zipkin.thriftscala.Moments, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DurationMomentsField)
    writeDurationMomentsValue(durationMoments_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDurationMomentsValue(durationMoments_item: com.twitter.zipkin.thriftscala.Moments, _oprot: TProtocol): Unit = {
    durationMoments_item.write(_oprot)
  }


  object Immutable extends ThriftStructCodec3[DependencyLink] {
    override def encode(_item: DependencyLink, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): DependencyLink = DependencyLink.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[DependencyLink] = DependencyLink.metaData
  }

  /**
   * The default read-only implementation of DependencyLink.  You typically should not need to
   * directly reference this class; instead, use the DependencyLink.apply method to construct
   * new instances.
   */
  class Immutable(
      val parent: String,
      val child: String,
      val durationMoments: com.twitter.zipkin.thriftscala.Moments,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends DependencyLink {
    def this(
      parent: String,
      child: String,
      durationMoments: com.twitter.zipkin.thriftscala.Moments
    ) = this(
      parent,
      child,
      durationMoments,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      parentOffset: Int,
      childOffset: Int,
      val durationMoments: com.twitter.zipkin.thriftscala.Moments,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends DependencyLink {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val parent: String =
      if (parentOffset == -1)
        null
      else {
        _proto.decodeString(_buf, parentOffset)
      }
    lazy val child: String =
      if (childOffset == -1)
        null
      else {
        _proto.decodeString(_buf, childOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide signifigant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the DependencyLink trait with additional state or
   * behavior and implement the read-only methods from DependencyLink using an underlying
   * instance.
   */
  trait Proxy extends DependencyLink {
    protected def _underlying_DependencyLink: DependencyLink
    override def parent: String = _underlying_DependencyLink.parent
    override def child: String = _underlying_DependencyLink.child
    override def durationMoments: com.twitter.zipkin.thriftscala.Moments = _underlying_DependencyLink.durationMoments
    override def _passthroughFields = _underlying_DependencyLink._passthroughFields
  }
}

trait DependencyLink
  extends ThriftStruct
  with scala.Product3[String, String, com.twitter.zipkin.thriftscala.Moments]
  with java.io.Serializable
{
  import DependencyLink._

  def parent: String
  def child: String
  def durationMoments: com.twitter.zipkin.thriftscala.Moments

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = parent
  def _2 = child
  def _3 = durationMoments


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (parent ne null) {
                writeParentValue(parent, _oprot)
                _root_.scala.Some(DependencyLink.ParentField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (child ne null) {
                writeChildValue(child, _oprot)
                _root_.scala.Some(DependencyLink.ChildField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (durationMoments ne null) {
                writeDurationMomentsValue(durationMoments, _oprot)
                _root_.scala.Some(DependencyLink.DurationMomentsField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): DependencyLink = {
    var parent: String = this.parent
    var child: String = this.child
    var durationMoments: com.twitter.zipkin.thriftscala.Moments = this.durationMoments
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        parent = readParentValue(_blob.read)
      case 2 =>
        child = readChildValue(_blob.read)
      case 3 =>
        durationMoments = readDurationMomentsValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      parent,
      child,
      durationMoments,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): DependencyLink = {
    var parent: String = this.parent
    var child: String = this.child
    var durationMoments: com.twitter.zipkin.thriftscala.Moments = this.durationMoments

    _fieldId match {
      case 1 =>
        parent = null
      case 2 =>
        child = null
      case 3 =>
        durationMoments = null
      case _ =>
    }
    new Immutable(
      parent,
      child,
      durationMoments,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetParent: DependencyLink = unsetField(1)

  def unsetChild: DependencyLink = unsetField(2)

  def unsetDurationMoments: DependencyLink = unsetField(3)


  override def write(_oprot: TProtocol): Unit = {
    DependencyLink.validate(this)
    _oprot.writeStructBegin(Struct)
    if (parent ne null) writeParentField(parent, _oprot)
    if (child ne null) writeChildField(child, _oprot)
    if (durationMoments ne null) writeDurationMomentsField(durationMoments, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    parent: String = this.parent,
    child: String = this.child,
    durationMoments: com.twitter.zipkin.thriftscala.Moments = this.durationMoments,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): DependencyLink =
    new Immutable(
      parent,
      child,
      durationMoments,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[DependencyLink]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[DependencyLink]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => this.parent
    case 1 => this.child
    case 2 => this.durationMoments
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "DependencyLink"
}