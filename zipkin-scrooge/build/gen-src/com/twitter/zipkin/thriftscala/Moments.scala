/**
 * Generated by Scrooge
 *   version: 4.0.0
 *   rev: 2d9d7656d3b3b7eff89450ac6a78f12af6cc627b
 *   built at: 20150828-134418
 */
package com.twitter.zipkin.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

/**
 * Moments is defined as below per algebird's MomentsGroup.scala
 *
 * A class to calculate the first five central moments over a sequence of Doubles.
 * Given the first five central moments, we can then calculate metrics like skewness
 * and kurtosis.
 *
 * m{i} denotes the ith central moment.
 */
object Moments extends ThriftStructCodec3[Moments] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Moments")
  val M0Field = new TField("m0", TType.I64, 1)
  val M0FieldManifest = implicitly[Manifest[Long]]
  val M1Field = new TField("m1", TType.DOUBLE, 2)
  val M1FieldManifest = implicitly[Manifest[Double]]
  val M2Field = new TField("m2", TType.DOUBLE, 3)
  val M2FieldManifest = implicitly[Manifest[Double]]
  val M3Field = new TField("m3", TType.DOUBLE, 4)
  val M3FieldManifest = implicitly[Manifest[Double]]
  val M4Field = new TField("m4", TType.DOUBLE, 5)
  val M4FieldManifest = implicitly[Manifest[Double]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      M0Field,
      false,
      false,
      M0FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      M1Field,
      false,
      false,
      M1FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      M2Field,
      true,
      false,
      M2FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      M3Field,
      true,
      false,
      M3FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      M4Field,
      true,
      false,
      M4FieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Moments): Unit = {
  }

  def withoutPassthroughFields(original: Moments): Moments =
    new Immutable(
      m0 =
        {
          val field = original.m0
          field
        },
      m1 =
        {
          val field = original.m1
          field
        },
      m2 =
        {
          val field = original.m2
          field.map { field =>
            field
          }
        },
      m3 =
        {
          val field = original.m3
          field.map { field =>
            field
          }
        },
      m4 =
        {
          val field = original.m4
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: Moments, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): Moments = {

    var m0: Long = 0L
    var m1: Double = 0.0
    var m2Offset: Int = -1
    var m3Offset: Int = -1
    var m4Offset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I64 =>
    
                m0 = readM0Value(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'm0' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.DOUBLE =>
    
                m1 = readM1Value(_iprot)
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'm1' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.DOUBLE =>
                m2Offset = _iprot.offsetSkipDouble
    
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'm2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.DOUBLE =>
                m3Offset = _iprot.offsetSkipDouble
    
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'm3' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.DOUBLE =>
                m4Offset = _iprot.offsetSkipDouble
    
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'm4' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      m0,
      m1,
      m2Offset,
      m3Offset,
      m4Offset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Moments =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): Moments = {
    var m0: Long = 0L
    var m1: Double = 0.0
    var m2: _root_.scala.Option[Double] = _root_.scala.None
    var m3: _root_.scala.Option[Double] = _root_.scala.None
    var m4: _root_.scala.Option[Double] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I64 =>
                m0 = readM0Value(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'm0' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.DOUBLE =>
                m1 = readM1Value(_iprot)
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'm1' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.DOUBLE =>
                m2 = _root_.scala.Some(readM2Value(_iprot))
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'm2' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.DOUBLE =>
                m3 = _root_.scala.Some(readM3Value(_iprot))
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'm3' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.DOUBLE =>
                m4 = _root_.scala.Some(readM4Value(_iprot))
              case _actualType =>
                val _expectedType = TType.DOUBLE
                throw new TProtocolException(
                  "Received wrong type for field 'm4' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      m0,
      m1,
      m2,
      m3,
      m4,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    m0: Long,
    m1: Double,
    m2: _root_.scala.Option[Double] = _root_.scala.None,
    m3: _root_.scala.Option[Double] = _root_.scala.None,
    m4: _root_.scala.Option[Double] = _root_.scala.None
  ): Moments =
    new Immutable(
      m0,
      m1,
      m2,
      m3,
      m4
    )

  def unapply(_item: Moments): _root_.scala.Option[scala.Product5[Long, Double, Option[Double], Option[Double], Option[Double]]] = _root_.scala.Some(_item)


  @inline private def readM0Value(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeM0Field(m0_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(M0Field)
    writeM0Value(m0_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeM0Value(m0_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(m0_item)
  }

  @inline private def readM1Value(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeM1Field(m1_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(M1Field)
    writeM1Value(m1_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeM1Value(m1_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(m1_item)
  }

  @inline private def readM2Value(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeM2Field(m2_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(M2Field)
    writeM2Value(m2_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeM2Value(m2_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(m2_item)
  }

  @inline private def readM3Value(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeM3Field(m3_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(M3Field)
    writeM3Value(m3_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeM3Value(m3_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(m3_item)
  }

  @inline private def readM4Value(_iprot: TProtocol): Double = {
    _iprot.readDouble()
  }

  @inline private def writeM4Field(m4_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(M4Field)
    writeM4Value(m4_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeM4Value(m4_item: Double, _oprot: TProtocol): Unit = {
    _oprot.writeDouble(m4_item)
  }


  object Immutable extends ThriftStructCodec3[Moments] {
    override def encode(_item: Moments, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Moments = Moments.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Moments] = Moments.metaData
  }

  /**
   * The default read-only implementation of Moments.  You typically should not need to
   * directly reference this class; instead, use the Moments.apply method to construct
   * new instances.
   */
  class Immutable(
      val m0: Long,
      val m1: Double,
      val m2: _root_.scala.Option[Double],
      val m3: _root_.scala.Option[Double],
      val m4: _root_.scala.Option[Double],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Moments {
    def this(
      m0: Long,
      m1: Double,
      m2: _root_.scala.Option[Double] = _root_.scala.None,
      m3: _root_.scala.Option[Double] = _root_.scala.None,
      m4: _root_.scala.Option[Double] = _root_.scala.None
    ) = this(
      m0,
      m1,
      m2,
      m3,
      m4,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val m0: Long,
      val m1: Double,
      m2Offset: Int,
      m3Offset: Int,
      m4Offset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Moments {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val m2: _root_.scala.Option[Double] =
      if (m2Offset == -1)
        None
      else {
        Some(_proto.decodeDouble(_buf, m2Offset))
      }
    lazy val m3: _root_.scala.Option[Double] =
      if (m3Offset == -1)
        None
      else {
        Some(_proto.decodeDouble(_buf, m3Offset))
      }
    lazy val m4: _root_.scala.Option[Double] =
      if (m4Offset == -1)
        None
      else {
        Some(_proto.decodeDouble(_buf, m4Offset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide signifigant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Moments trait with additional state or
   * behavior and implement the read-only methods from Moments using an underlying
   * instance.
   */
  trait Proxy extends Moments {
    protected def _underlying_Moments: Moments
    override def m0: Long = _underlying_Moments.m0
    override def m1: Double = _underlying_Moments.m1
    override def m2: _root_.scala.Option[Double] = _underlying_Moments.m2
    override def m3: _root_.scala.Option[Double] = _underlying_Moments.m3
    override def m4: _root_.scala.Option[Double] = _underlying_Moments.m4
    override def _passthroughFields = _underlying_Moments._passthroughFields
  }
}

trait Moments
  extends ThriftStruct
  with scala.Product5[Long, Double, Option[Double], Option[Double], Option[Double]]
  with java.io.Serializable
{
  import Moments._

  def m0: Long
  def m1: Double
  def m2: _root_.scala.Option[Double]
  def m3: _root_.scala.Option[Double]
  def m4: _root_.scala.Option[Double]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = m0
  def _2 = m1
  def _3 = m2
  def _4 = m3
  def _5 = m4


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeM0Value(m0, _oprot)
                _root_.scala.Some(Moments.M0Field)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeM1Value(m1, _oprot)
                _root_.scala.Some(Moments.M1Field)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (m2.isDefined) {
                writeM2Value(m2.get, _oprot)
                _root_.scala.Some(Moments.M2Field)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (m3.isDefined) {
                writeM3Value(m3.get, _oprot)
                _root_.scala.Some(Moments.M3Field)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (m4.isDefined) {
                writeM4Value(m4.get, _oprot)
                _root_.scala.Some(Moments.M4Field)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Moments = {
    var m0: Long = this.m0
    var m1: Double = this.m1
    var m2: _root_.scala.Option[Double] = this.m2
    var m3: _root_.scala.Option[Double] = this.m3
    var m4: _root_.scala.Option[Double] = this.m4
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        m0 = readM0Value(_blob.read)
      case 2 =>
        m1 = readM1Value(_blob.read)
      case 3 =>
        m2 = _root_.scala.Some(readM2Value(_blob.read))
      case 4 =>
        m3 = _root_.scala.Some(readM3Value(_blob.read))
      case 5 =>
        m4 = _root_.scala.Some(readM4Value(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      m0,
      m1,
      m2,
      m3,
      m4,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Moments = {
    var m0: Long = this.m0
    var m1: Double = this.m1
    var m2: _root_.scala.Option[Double] = this.m2
    var m3: _root_.scala.Option[Double] = this.m3
    var m4: _root_.scala.Option[Double] = this.m4

    _fieldId match {
      case 1 =>
        m0 = 0L
      case 2 =>
        m1 = 0.0
      case 3 =>
        m2 = _root_.scala.None
      case 4 =>
        m3 = _root_.scala.None
      case 5 =>
        m4 = _root_.scala.None
      case _ =>
    }
    new Immutable(
      m0,
      m1,
      m2,
      m3,
      m4,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetM0: Moments = unsetField(1)

  def unsetM1: Moments = unsetField(2)

  def unsetM2: Moments = unsetField(3)

  def unsetM3: Moments = unsetField(4)

  def unsetM4: Moments = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    Moments.validate(this)
    _oprot.writeStructBegin(Struct)
    writeM0Field(m0, _oprot)
    writeM1Field(m1, _oprot)
    if (m2.isDefined) writeM2Field(m2.get, _oprot)
    if (m3.isDefined) writeM3Field(m3.get, _oprot)
    if (m4.isDefined) writeM4Field(m4.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    m0: Long = this.m0,
    m1: Double = this.m1,
    m2: _root_.scala.Option[Double] = this.m2,
    m3: _root_.scala.Option[Double] = this.m3,
    m4: _root_.scala.Option[Double] = this.m4,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Moments =
    new Immutable(
      m0,
      m1,
      m2,
      m3,
      m4,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Moments]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[Moments]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.m0
    case 1 => this.m1
    case 2 => this.m2
    case 3 => this.m3
    case 4 => this.m4
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Moments"
}