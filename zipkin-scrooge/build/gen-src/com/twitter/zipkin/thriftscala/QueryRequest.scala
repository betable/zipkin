/**
 * Generated by Scrooge
 *   version: 4.1.0
 *   rev: 87b84f89477a4737c8d57580a1e8bdaeac529b19
 *   built at: 20150928-114808
 */
package com.twitter.zipkin.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object QueryRequest extends ThriftStructCodec3[QueryRequest] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("QueryRequest")
  val ServiceNameField = new TField("service_name", TType.STRING, 1)
  val ServiceNameFieldManifest = implicitly[Manifest[String]]
  val SpanNameField = new TField("span_name", TType.STRING, 2)
  val SpanNameFieldManifest = implicitly[Manifest[String]]
  val AnnotationsField = new TField("annotations", TType.LIST, 3)
  val AnnotationsFieldManifest = implicitly[Manifest[Seq[String]]]
  val BinaryAnnotationsField = new TField("binary_annotations", TType.MAP, 8)
  val BinaryAnnotationsFieldManifest = implicitly[Manifest[Map[String, String]]]
  val EndTsField = new TField("end_ts", TType.I64, 5)
  val EndTsFieldManifest = implicitly[Manifest[Long]]
  val LimitField = new TField("limit", TType.I32, 6)
  val LimitFieldManifest = implicitly[Manifest[Int]]
  val AdjustClockSkewField = new TField("adjust_clock_skew", TType.BOOL, 9)
  val AdjustClockSkewFieldManifest = implicitly[Manifest[Boolean]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ServiceNameField,
      false,
      false,
      ServiceNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      SpanNameField,
      true,
      false,
      SpanNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      AnnotationsField,
      true,
      false,
      AnnotationsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      BinaryAnnotationsField,
      true,
      false,
      BinaryAnnotationsFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      EndTsField,
      false,
      false,
      EndTsFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      LimitField,
      false,
      false,
      LimitFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      AdjustClockSkewField,
      false,
      false,
      AdjustClockSkewFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: QueryRequest): Unit = {
  }

  def withoutPassthroughFields(original: QueryRequest): QueryRequest =
    new Immutable(
      serviceName =
        {
          val field = original.serviceName
          field
        },
      spanName =
        {
          val field = original.spanName
          field.map { field =>
            field
          }
        },
      annotations =
        {
          val field = original.annotations
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      binaryAnnotations =
        {
          val field = original.binaryAnnotations
          field.map { field =>
            field.map { case (key, value) =>
                val newKey = {
                val field = key
                field
              }
  
  
                val newValue = {
                val field = value
                field
              }
  
  
              newKey -> newValue
            }
          }
        },
      endTs =
        {
          val field = original.endTs
          field
        },
      limit =
        {
          val field = original.limit
          field
        },
      adjustClockSkew =
        {
          val field = original.adjustClockSkew
          field
        }
    )

  override def encode(_item: QueryRequest, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): QueryRequest = {

    var service_nameOffset: Int = -1
    var span_nameOffset: Int = -1
    var annotations: Option[Seq[String]] = None
    var binaryAnnotations: Option[Map[String, String]] = None
    var endTs: Long = 0L
    var limit: Int = 0
    var adjustClockSkew: Boolean = true

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                service_nameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'serviceName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                span_nameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'spanName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
    
                annotations = Some(readAnnotationsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'annotations' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.MAP =>
    
                binaryAnnotations = Some(readBinaryAnnotationsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'binaryAnnotations' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I64 =>
    
                endTs = readEndTsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'endTs' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I32 =>
    
                limit = readLimitValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'limit' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.BOOL =>
    
                adjustClockSkew = readAdjustClockSkewValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'adjustClockSkew' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      service_nameOffset,
      span_nameOffset,
      annotations,
      binaryAnnotations,
      endTs,
      limit,
      adjustClockSkew,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): QueryRequest =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): QueryRequest = {
    var serviceName: String = null
    var spanName: _root_.scala.Option[String] = _root_.scala.None
    var annotations: _root_.scala.Option[Seq[String]] = _root_.scala.None
    var binaryAnnotations: _root_.scala.Option[Map[String, String]] = _root_.scala.None
    var endTs: Long = 0L
    var limit: Int = 0
    var adjustClockSkew: Boolean = true
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                serviceName = readServiceNameValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'serviceName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                spanName = _root_.scala.Some(readSpanNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'spanName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
                annotations = _root_.scala.Some(readAnnotationsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'annotations' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.MAP =>
                binaryAnnotations = _root_.scala.Some(readBinaryAnnotationsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'binaryAnnotations' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I64 =>
                endTs = readEndTsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'endTs' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I32 =>
                limit = readLimitValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'limit' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.BOOL =>
                adjustClockSkew = readAdjustClockSkewValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'adjustClockSkew' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      serviceName,
      spanName,
      annotations,
      binaryAnnotations,
      endTs,
      limit,
      adjustClockSkew,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    serviceName: String,
    spanName: _root_.scala.Option[String] = _root_.scala.None,
    annotations: _root_.scala.Option[Seq[String]] = _root_.scala.None,
    binaryAnnotations: _root_.scala.Option[Map[String, String]] = _root_.scala.None,
    endTs: Long,
    limit: Int,
    adjustClockSkew: Boolean = true
  ): QueryRequest =
    new Immutable(
      serviceName,
      spanName,
      annotations,
      binaryAnnotations,
      endTs,
      limit,
      adjustClockSkew
    )

  def unapply(_item: QueryRequest): _root_.scala.Option[scala.Product7[String, Option[String], Option[Seq[String]], Option[Map[String, String]], Long, Int, Boolean]] = _root_.scala.Some(_item)


  @inline private def readServiceNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeServiceNameField(serviceName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ServiceNameField)
    writeServiceNameValue(serviceName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeServiceNameValue(serviceName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(serviceName_item)
  }

  @inline private def readSpanNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeSpanNameField(spanName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SpanNameField)
    writeSpanNameValue(spanName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSpanNameValue(spanName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(spanName_item)
  }

  @inline private def readAnnotationsValue(_iprot: TProtocol): Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeAnnotationsField(annotations_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AnnotationsField)
    writeAnnotationsValue(annotations_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAnnotationsValue(annotations_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, annotations_item.size))
    annotations_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = annotations_item.size
        while (_i < _size) {
          val annotations_item_element = annotations_item(_i)
          _oprot.writeString(annotations_item_element)
          _i += 1
        }
      case _ =>
        annotations_item.foreach { annotations_item_element =>
          _oprot.writeString(annotations_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readBinaryAnnotationsValue(_iprot: TProtocol): Map[String, String] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, String]
    } else {
      val _rv = new mutable$HashMap[String, String]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          _iprot.readString()
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeBinaryAnnotationsField(binaryAnnotations_item: Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(BinaryAnnotationsField)
    writeBinaryAnnotationsValue(binaryAnnotations_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeBinaryAnnotationsValue(binaryAnnotations_item: Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, binaryAnnotations_item.size))
    binaryAnnotations_item.foreach { case (binaryAnnotations_item_key, binaryAnnotations_item_value) =>
      _oprot.writeString(binaryAnnotations_item_key)
      _oprot.writeString(binaryAnnotations_item_value)
    }
    _oprot.writeMapEnd()
  }

  @inline private def readEndTsValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeEndTsField(endTs_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(EndTsField)
    writeEndTsValue(endTs_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeEndTsValue(endTs_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(endTs_item)
  }

  @inline private def readLimitValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeLimitField(limit_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LimitField)
    writeLimitValue(limit_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLimitValue(limit_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(limit_item)
  }

  @inline private def readAdjustClockSkewValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeAdjustClockSkewField(adjustClockSkew_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AdjustClockSkewField)
    writeAdjustClockSkewValue(adjustClockSkew_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAdjustClockSkewValue(adjustClockSkew_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(adjustClockSkew_item)
  }


  object Immutable extends ThriftStructCodec3[QueryRequest] {
    override def encode(_item: QueryRequest, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): QueryRequest = QueryRequest.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[QueryRequest] = QueryRequest.metaData
  }

  /**
   * The default read-only implementation of QueryRequest.  You typically should not need to
   * directly reference this class; instead, use the QueryRequest.apply method to construct
   * new instances.
   */
  class Immutable(
      val serviceName: String,
      val spanName: _root_.scala.Option[String],
      val annotations: _root_.scala.Option[Seq[String]],
      val binaryAnnotations: _root_.scala.Option[Map[String, String]],
      val endTs: Long,
      val limit: Int,
      val adjustClockSkew: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends QueryRequest {
    def this(
      serviceName: String,
      spanName: _root_.scala.Option[String] = _root_.scala.None,
      annotations: _root_.scala.Option[Seq[String]] = _root_.scala.None,
      binaryAnnotations: _root_.scala.Option[Map[String, String]] = _root_.scala.None,
      endTs: Long,
      limit: Int,
      adjustClockSkew: Boolean = true
    ) = this(
      serviceName,
      spanName,
      annotations,
      binaryAnnotations,
      endTs,
      limit,
      adjustClockSkew,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      service_nameOffset: Int,
      span_nameOffset: Int,
      val annotations: _root_.scala.Option[Seq[String]],
      val binaryAnnotations: _root_.scala.Option[Map[String, String]],
      val endTs: Long,
      val limit: Int,
      val adjustClockSkew: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends QueryRequest {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val serviceName: String =
      if (service_nameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, service_nameOffset)
      }
    lazy val spanName: _root_.scala.Option[String] =
      if (span_nameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, span_nameOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide signifigant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the QueryRequest trait with additional state or
   * behavior and implement the read-only methods from QueryRequest using an underlying
   * instance.
   */
  trait Proxy extends QueryRequest {
    protected def _underlying_QueryRequest: QueryRequest
    override def serviceName: String = _underlying_QueryRequest.serviceName
    override def spanName: _root_.scala.Option[String] = _underlying_QueryRequest.spanName
    override def annotations: _root_.scala.Option[Seq[String]] = _underlying_QueryRequest.annotations
    override def binaryAnnotations: _root_.scala.Option[Map[String, String]] = _underlying_QueryRequest.binaryAnnotations
    override def endTs: Long = _underlying_QueryRequest.endTs
    override def limit: Int = _underlying_QueryRequest.limit
    override def adjustClockSkew: Boolean = _underlying_QueryRequest.adjustClockSkew
    override def _passthroughFields = _underlying_QueryRequest._passthroughFields
  }
}

trait QueryRequest
  extends ThriftStruct
  with scala.Product7[String, Option[String], Option[Seq[String]], Option[Map[String, String]], Long, Int, Boolean]
  with java.io.Serializable
{
  import QueryRequest._

  def serviceName: String
  def spanName: _root_.scala.Option[String]
  def annotations: _root_.scala.Option[Seq[String]]
  def binaryAnnotations: _root_.scala.Option[Map[String, String]]
  def endTs: Long
  def limit: Int
  def adjustClockSkew: Boolean

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = serviceName
  def _2 = spanName
  def _3 = annotations
  def _4 = binaryAnnotations
  def _5 = endTs
  def _6 = limit
  def _7 = adjustClockSkew


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (serviceName ne null) {
                writeServiceNameValue(serviceName, _oprot)
                _root_.scala.Some(QueryRequest.ServiceNameField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (spanName.isDefined) {
                writeSpanNameValue(spanName.get, _oprot)
                _root_.scala.Some(QueryRequest.SpanNameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (annotations.isDefined) {
                writeAnnotationsValue(annotations.get, _oprot)
                _root_.scala.Some(QueryRequest.AnnotationsField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (binaryAnnotations.isDefined) {
                writeBinaryAnnotationsValue(binaryAnnotations.get, _oprot)
                _root_.scala.Some(QueryRequest.BinaryAnnotationsField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeEndTsValue(endTs, _oprot)
                _root_.scala.Some(QueryRequest.EndTsField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (true) {
                writeLimitValue(limit, _oprot)
                _root_.scala.Some(QueryRequest.LimitField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (true) {
                writeAdjustClockSkewValue(adjustClockSkew, _oprot)
                _root_.scala.Some(QueryRequest.AdjustClockSkewField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): QueryRequest = {
    var serviceName: String = this.serviceName
    var spanName: _root_.scala.Option[String] = this.spanName
    var annotations: _root_.scala.Option[Seq[String]] = this.annotations
    var binaryAnnotations: _root_.scala.Option[Map[String, String]] = this.binaryAnnotations
    var endTs: Long = this.endTs
    var limit: Int = this.limit
    var adjustClockSkew: Boolean = this.adjustClockSkew
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        serviceName = readServiceNameValue(_blob.read)
      case 2 =>
        spanName = _root_.scala.Some(readSpanNameValue(_blob.read))
      case 3 =>
        annotations = _root_.scala.Some(readAnnotationsValue(_blob.read))
      case 8 =>
        binaryAnnotations = _root_.scala.Some(readBinaryAnnotationsValue(_blob.read))
      case 5 =>
        endTs = readEndTsValue(_blob.read)
      case 6 =>
        limit = readLimitValue(_blob.read)
      case 9 =>
        adjustClockSkew = readAdjustClockSkewValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      serviceName,
      spanName,
      annotations,
      binaryAnnotations,
      endTs,
      limit,
      adjustClockSkew,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): QueryRequest = {
    var serviceName: String = this.serviceName
    var spanName: _root_.scala.Option[String] = this.spanName
    var annotations: _root_.scala.Option[Seq[String]] = this.annotations
    var binaryAnnotations: _root_.scala.Option[Map[String, String]] = this.binaryAnnotations
    var endTs: Long = this.endTs
    var limit: Int = this.limit
    var adjustClockSkew: Boolean = this.adjustClockSkew

    _fieldId match {
      case 1 =>
        serviceName = null
      case 2 =>
        spanName = _root_.scala.None
      case 3 =>
        annotations = _root_.scala.None
      case 8 =>
        binaryAnnotations = _root_.scala.None
      case 5 =>
        endTs = 0L
      case 6 =>
        limit = 0
      case 9 =>
        adjustClockSkew = true
      case _ =>
    }
    new Immutable(
      serviceName,
      spanName,
      annotations,
      binaryAnnotations,
      endTs,
      limit,
      adjustClockSkew,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetServiceName: QueryRequest = unsetField(1)

  def unsetSpanName: QueryRequest = unsetField(2)

  def unsetAnnotations: QueryRequest = unsetField(3)

  def unsetBinaryAnnotations: QueryRequest = unsetField(8)

  def unsetEndTs: QueryRequest = unsetField(5)

  def unsetLimit: QueryRequest = unsetField(6)

  def unsetAdjustClockSkew: QueryRequest = unsetField(9)


  override def write(_oprot: TProtocol): Unit = {
    QueryRequest.validate(this)
    _oprot.writeStructBegin(Struct)
    if (serviceName ne null) writeServiceNameField(serviceName, _oprot)
    if (spanName.isDefined) writeSpanNameField(spanName.get, _oprot)
    if (annotations.isDefined) writeAnnotationsField(annotations.get, _oprot)
    if (binaryAnnotations.isDefined) writeBinaryAnnotationsField(binaryAnnotations.get, _oprot)
    writeEndTsField(endTs, _oprot)
    writeLimitField(limit, _oprot)
    writeAdjustClockSkewField(adjustClockSkew, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    serviceName: String = this.serviceName,
    spanName: _root_.scala.Option[String] = this.spanName,
    annotations: _root_.scala.Option[Seq[String]] = this.annotations,
    binaryAnnotations: _root_.scala.Option[Map[String, String]] = this.binaryAnnotations,
    endTs: Long = this.endTs,
    limit: Int = this.limit,
    adjustClockSkew: Boolean = this.adjustClockSkew,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): QueryRequest =
    new Immutable(
      serviceName,
      spanName,
      annotations,
      binaryAnnotations,
      endTs,
      limit,
      adjustClockSkew,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[QueryRequest]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[QueryRequest]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 7

  override def productElement(n: Int): Any = n match {
    case 0 => this.serviceName
    case 1 => this.spanName
    case 2 => this.annotations
    case 3 => this.binaryAnnotations
    case 4 => this.endTs
    case 5 => this.limit
    case 6 => this.adjustClockSkew
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "QueryRequest"
}