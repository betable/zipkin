/**
 * Generated by Scrooge
 *   version: 4.1.0
 *   rev: 87b84f89477a4737c8d57580a1e8bdaeac529b19
 *   built at: 20150928-114808
 */
package com.twitter.zipkin.thriftscala

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object ResultCode {
  
  case object Ok extends com.twitter.zipkin.thriftscala.ResultCode {
    val value = 0
    val name = "Ok"
    val originalName = "OK"
  }

  private[this] val _SomeOk = _root_.scala.Some(com.twitter.zipkin.thriftscala.ResultCode.Ok)
  
  case object TryLater extends com.twitter.zipkin.thriftscala.ResultCode {
    val value = 1
    val name = "TryLater"
    val originalName = "TRY_LATER"
  }

  private[this] val _SomeTryLater = _root_.scala.Some(com.twitter.zipkin.thriftscala.ResultCode.TryLater)

  case class EnumUnknownResultCode(value: Int) extends com.twitter.zipkin.thriftscala.ResultCode {
    val name = "EnumUnknownResultCode" + value
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): com.twitter.zipkin.thriftscala.ResultCode =
    value match {
      case 0 => com.twitter.zipkin.thriftscala.ResultCode.Ok
      case 1 => com.twitter.zipkin.thriftscala.ResultCode.TryLater
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownResultCode(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): com.twitter.zipkin.thriftscala.ResultCode =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownResultCode(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[com.twitter.zipkin.thriftscala.ResultCode] =
    value match {
      case 0 => _SomeOk
      case 1 => _SomeTryLater
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[com.twitter.zipkin.thriftscala.ResultCode] =
    name.toLowerCase match {
      case "ok" => _SomeOk
      case "trylater" => _SomeTryLater
      case _ => _root_.scala.None
    }

  lazy val list: List[com.twitter.zipkin.thriftscala.ResultCode] = scala.List[com.twitter.zipkin.thriftscala.ResultCode](
    com.twitter.zipkin.thriftscala.ResultCode.Ok,
    com.twitter.zipkin.thriftscala.ResultCode.TryLater
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait ResultCode extends ThriftEnum with Serializable