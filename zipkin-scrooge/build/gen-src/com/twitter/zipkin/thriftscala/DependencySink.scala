/**
 * Generated by Scrooge
 *   version: 4.0.0
 *   rev: 2d9d7656d3b3b7eff89450ac6a78f12af6cc627b
 *   built at: 20150828-134418
 */
package com.twitter.zipkin.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftService, ThriftStruct,
  ThriftStructCodec, ThriftStructCodec3,
  ThriftStructFieldInfo, ThriftResponse, ThriftUtil}
import com.twitter.finagle.thrift.{Protocols, ThriftClientRequest, ThriftServiceIface}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait DependencySink[+MM[_]] extends ThriftService {
  
  def storeDependencies(dependencies: com.twitter.zipkin.thriftscala.Dependencies): MM[Unit]
}



object DependencySink { self =>
  case class ServiceIface(
      storeDependencies : com.twitter.finagle.Service[self.StoreDependencies.Args, self.StoreDependencies.Result]
  ) extends __ServiceIface

  // This is needed to support service inheritance.
  trait __ServiceIface  {
    def storeDependencies : com.twitter.finagle.Service[self.StoreDependencies.Args, self.StoreDependencies.Result]
  }

  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        pf: TProtocolFactory = Protocols.binaryFactory(),
        stats: com.twitter.finagle.stats.StatsReceiver
      ): ServiceIface =
        new ServiceIface(
          storeDependencies = ThriftServiceIface(self.StoreDependencies, binaryService, pf, stats)
      )
  }

  class MethodIface(serviceIface: __ServiceIface)
    extends DependencySink[Future] {
    private[this] val __storeDependencies_service =
      ThriftServiceIface.resultFilter(self.StoreDependencies) andThen serviceIface.storeDependencies
    def storeDependencies(dependencies: com.twitter.zipkin.thriftscala.Dependencies): Future[Unit] =
      __storeDependencies_service(self.StoreDependencies.Args(dependencies)).unit
  }

  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, DependencySink[Future]] {
    def newMethodIface(serviceIface: ServiceIface): DependencySink[Future] =
      new MethodIface(serviceIface)
  }

  object StoreDependencies extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("storeDependencies_args")
      val DependenciesField = new TField("dependencies", TType.STRUCT, 1)
      val DependenciesFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.Dependencies]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          DependenciesField,
          false,
          false,
          DependenciesFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          dependencies =
            {
              val field = original.dependencies
              com.twitter.zipkin.thriftscala.Dependencies.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var dependencies: com.twitter.zipkin.thriftscala.Dependencies = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    dependencies = readDependenciesValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'dependencies' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          dependencies,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        dependencies: com.twitter.zipkin.thriftscala.Dependencies
      ): Args =
        new Args(
          dependencies
        )
    
      def unapply(_item: Args): _root_.scala.Option[com.twitter.zipkin.thriftscala.Dependencies] = _root_.scala.Some(_item.dependencies)
    
    
      @inline private def readDependenciesValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.Dependencies = {
        com.twitter.zipkin.thriftscala.Dependencies.decode(_iprot)
      }
    
      @inline private def writeDependenciesField(dependencies_item: com.twitter.zipkin.thriftscala.Dependencies, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(DependenciesField)
        writeDependenciesValue(dependencies_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeDependenciesValue(dependencies_item: com.twitter.zipkin.thriftscala.Dependencies, _oprot: TProtocol): Unit = {
        dependencies_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val dependencies: com.twitter.zipkin.thriftscala.Dependencies,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product1[com.twitter.zipkin.thriftscala.Dependencies]
      with java.io.Serializable
    {
      import Args._
      def this(
        dependencies: com.twitter.zipkin.thriftscala.Dependencies
      ) = this(
        dependencies,
        Map.empty
      )
    
      def _1 = dependencies
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (dependencies ne null) writeDependenciesField(dependencies, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        dependencies: com.twitter.zipkin.thriftscala.Dependencies = this.dependencies,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          dependencies,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.dependencies
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = Unit
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("storeDependencies_result")
      val EField = new TField("e", TType.STRUCT, 1)
      val EFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.DependenciesException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          EField,
          true,
          false,
          EFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          e =
            {
              val field = original.e
              field.map { field =>
                com.twitter.zipkin.thriftscala.DependenciesException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var e: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    e = _root_.scala.Some(readEValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'e' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          e,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        e: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException] = _root_.scala.None
      ): Result =
        new Result(
          e
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException]] = _root_.scala.Some(_item.e)
    
    
      @inline private def readEValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.DependenciesException = {
        com.twitter.zipkin.thriftscala.DependenciesException.decode(_iprot)
      }
    
      @inline private def writeEField(e_item: com.twitter.zipkin.thriftscala.DependenciesException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(EField)
        writeEValue(e_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeEValue(e_item: com.twitter.zipkin.thriftscala.DependenciesException, _oprot: TProtocol): Unit = {
        e_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val e: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Unit] with ThriftStruct
      with scala.Product1[Option[com.twitter.zipkin.thriftscala.DependenciesException]]
      with java.io.Serializable
    {
      import Result._
      def this(
        e: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException] = _root_.scala.None
      ) = this(
        e,
        Map.empty
      )
    
      def _1 = e
    
      def successField: Option[Unit] = Some(Unit)
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(e)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (e.isDefined) writeEField(e.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        e: _root_.scala.Option[com.twitter.zipkin.thriftscala.DependenciesException] = this.e,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          e,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.e
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    val name = "storeDependencies"
    val serviceName = "DependencySink"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val storeDependencies$args = StoreDependencies.Args
  type storeDependencies$args = StoreDependencies.Args

  val storeDependencies$result = StoreDependencies.Result
  type storeDependencies$result = StoreDependencies.Result


  trait FutureIface extends DependencySink[Future] {
    
    def storeDependencies(dependencies: com.twitter.zipkin.thriftscala.Dependencies): Future[Unit]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "DependencySink",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver)
    extends DependencySink$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats)
    with FutureIface

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends DependencySink$FinagleService(
      iface,
      protocolFactory)
}