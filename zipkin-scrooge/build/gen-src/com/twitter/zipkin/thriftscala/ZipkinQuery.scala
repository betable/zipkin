/**
 * Generated by Scrooge
 *   version: 4.0.0
 *   rev: 2d9d7656d3b3b7eff89450ac6a78f12af6cc627b
 *   built at: 20150828-134418
 */
package com.twitter.zipkin.thriftscala

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftService, ThriftStruct,
  ThriftStructCodec, ThriftStructCodec3,
  ThriftStructFieldInfo, ThriftResponse, ThriftUtil}
import com.twitter.finagle.thrift.{Protocols, ThriftClientRequest, ThriftServiceIface}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait ZipkinQuery[+MM[_]] extends ThriftService {
  
  def getTracesByIds(traceIds: Seq[Long] = Seq[Long](), adjustClockSkew: Boolean = true): MM[Seq[com.twitter.zipkin.thriftscala.Trace]]
  
  def getTraces(request: com.twitter.zipkin.thriftscala.QueryRequest): MM[Seq[com.twitter.zipkin.thriftscala.Trace]]
  /**
       * Fetch all the service names we have seen from now all the way back to the set ttl.
       */
  def getServiceNames(): MM[Set[String]]
  /**
       * Get all the seen span names for a particular service, from now back until the set ttl.
       */
  def getSpanNames(serviceName: String): MM[Set[String]]
}



object ZipkinQuery { self =>
  case class ServiceIface(
      getTracesByIds : com.twitter.finagle.Service[self.GetTracesByIds.Args, self.GetTracesByIds.Result],
      getTraces : com.twitter.finagle.Service[self.GetTraces.Args, self.GetTraces.Result],
      getServiceNames : com.twitter.finagle.Service[self.GetServiceNames.Args, self.GetServiceNames.Result],
      getSpanNames : com.twitter.finagle.Service[self.GetSpanNames.Args, self.GetSpanNames.Result]
  ) extends __ServiceIface

  // This is needed to support service inheritance.
  trait __ServiceIface  {
    def getTracesByIds : com.twitter.finagle.Service[self.GetTracesByIds.Args, self.GetTracesByIds.Result]
    def getTraces : com.twitter.finagle.Service[self.GetTraces.Args, self.GetTraces.Result]
    def getServiceNames : com.twitter.finagle.Service[self.GetServiceNames.Args, self.GetServiceNames.Result]
    def getSpanNames : com.twitter.finagle.Service[self.GetSpanNames.Args, self.GetSpanNames.Result]
  }

  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        pf: TProtocolFactory = Protocols.binaryFactory(),
        stats: com.twitter.finagle.stats.StatsReceiver
      ): ServiceIface =
        new ServiceIface(
          getTracesByIds = ThriftServiceIface(self.GetTracesByIds, binaryService, pf, stats),
          getTraces = ThriftServiceIface(self.GetTraces, binaryService, pf, stats),
          getServiceNames = ThriftServiceIface(self.GetServiceNames, binaryService, pf, stats),
          getSpanNames = ThriftServiceIface(self.GetSpanNames, binaryService, pf, stats)
      )
  }

  class MethodIface(serviceIface: __ServiceIface)
    extends ZipkinQuery[Future] {
    private[this] val __getTracesByIds_service =
      ThriftServiceIface.resultFilter(self.GetTracesByIds) andThen serviceIface.getTracesByIds
    def getTracesByIds(traceIds: Seq[Long] = Seq[Long](), adjustClockSkew: Boolean = true): Future[Seq[com.twitter.zipkin.thriftscala.Trace]] =
      __getTracesByIds_service(self.GetTracesByIds.Args(traceIds, adjustClockSkew))
    private[this] val __getTraces_service =
      ThriftServiceIface.resultFilter(self.GetTraces) andThen serviceIface.getTraces
    def getTraces(request: com.twitter.zipkin.thriftscala.QueryRequest): Future[Seq[com.twitter.zipkin.thriftscala.Trace]] =
      __getTraces_service(self.GetTraces.Args(request))
    private[this] val __getServiceNames_service =
      ThriftServiceIface.resultFilter(self.GetServiceNames) andThen serviceIface.getServiceNames
    def getServiceNames(): Future[Set[String]] =
      __getServiceNames_service(self.GetServiceNames.Args())
    private[this] val __getSpanNames_service =
      ThriftServiceIface.resultFilter(self.GetSpanNames) andThen serviceIface.getSpanNames
    def getSpanNames(serviceName: String): Future[Set[String]] =
      __getSpanNames_service(self.GetSpanNames.Args(serviceName))
  }

  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, ZipkinQuery[Future]] {
    def newMethodIface(serviceIface: ServiceIface): ZipkinQuery[Future] =
      new MethodIface(serviceIface)
  }

  object GetTracesByIds extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getTracesByIds_args")
      val TraceIdsField = new TField("trace_ids", TType.LIST, 1)
      val TraceIdsFieldManifest = implicitly[Manifest[Seq[Long]]]
      val AdjustClockSkewField = new TField("adjust_clock_skew", TType.BOOL, 3)
      val AdjustClockSkewFieldManifest = implicitly[Manifest[Boolean]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdsField,
          false,
          false,
          TraceIdsFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[Long]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          AdjustClockSkewField,
          false,
          false,
          AdjustClockSkewFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceIds =
            {
              val field = original.traceIds
              field.map { field =>
                field
              }
            },
          adjustClockSkew =
            {
              val field = original.adjustClockSkew
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceIds: Seq[Long] = Seq[Long]()
        var adjustClockSkew: Boolean = true
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.LIST =>
                    traceIds = readTraceIdsValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'traceIds' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.BOOL =>
                    adjustClockSkew = readAdjustClockSkewValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.BOOL
                    throw new TProtocolException(
                      "Received wrong type for field 'adjustClockSkew' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceIds,
          adjustClockSkew,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceIds: Seq[Long] = Seq[Long](),
        adjustClockSkew: Boolean = true
      ): Args =
        new Args(
          traceIds,
          adjustClockSkew
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[Seq[Long], Boolean]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdsValue(_iprot: TProtocol): Seq[Long] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[Long](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              _iprot.readI64()
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeTraceIdsField(traceIds_item: Seq[Long], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdsField)
        writeTraceIdsValue(traceIds_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdsValue(traceIds_item: Seq[Long], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.I64, traceIds_item.size))
        traceIds_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = traceIds_item.size
            while (_i < _size) {
              val traceIds_item_element = traceIds_item(_i)
              _oprot.writeI64(traceIds_item_element)
              _i += 1
            }
          case _ =>
            traceIds_item.foreach { traceIds_item_element =>
              _oprot.writeI64(traceIds_item_element)
            }
        }
        _oprot.writeListEnd()
      }
    
      @inline private def readAdjustClockSkewValue(_iprot: TProtocol): Boolean = {
        _iprot.readBool()
      }
    
      @inline private def writeAdjustClockSkewField(adjustClockSkew_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(AdjustClockSkewField)
        writeAdjustClockSkewValue(adjustClockSkew_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeAdjustClockSkewValue(adjustClockSkew_item: Boolean, _oprot: TProtocol): Unit = {
        _oprot.writeBool(adjustClockSkew_item)
      }
    
    
    }
    
    class Args(
        val traceIds: Seq[Long],
        val adjustClockSkew: Boolean,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[Seq[Long], Boolean]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceIds: Seq[Long] = Seq[Long](),
        adjustClockSkew: Boolean = true
      ) = this(
        traceIds,
        adjustClockSkew,
        Map.empty
      )
    
      def _1 = traceIds
      def _2 = adjustClockSkew
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceIds ne null) writeTraceIdsField(traceIds, _oprot)
        writeAdjustClockSkewField(adjustClockSkew, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceIds: Seq[Long] = this.traceIds,
        adjustClockSkew: Boolean = this.adjustClockSkew,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceIds,
          adjustClockSkew,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceIds
        case 1 => this.adjustClockSkew
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = Seq[com.twitter.zipkin.thriftscala.Trace]
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getTracesByIds_result")
      val SuccessField = new TField("success", TType.LIST, 0)
      val SuccessFieldManifest = implicitly[Manifest[Seq[com.twitter.zipkin.thriftscala.Trace]]]
      val QeField = new TField("qe", TType.STRUCT, 1)
      val QeFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.QueryException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[com.twitter.zipkin.thriftscala.Trace]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          QeField,
          true,
          false,
          QeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field.map { field =>
                  com.twitter.zipkin.thriftscala.Trace.withoutPassthroughFields(field)
                }
              }
            },
          qe =
            {
              val field = original.qe
              field.map { field =>
                com.twitter.zipkin.thriftscala.QueryException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = _root_.scala.None
        var qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.LIST =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    qe = _root_.scala.Some(readQeValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'qe' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          qe,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          qe
        )
    
      def unapply(_item: Result): _root_.scala.Option[scala.Product2[Option[Seq[com.twitter.zipkin.thriftscala.Trace]], Option[com.twitter.zipkin.thriftscala.QueryException]]] = _root_.scala.Some(_item)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Seq[com.twitter.zipkin.thriftscala.Trace] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[com.twitter.zipkin.thriftscala.Trace](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              com.twitter.zipkin.thriftscala.Trace.decode(_iprot)
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeSuccessField(success_item: Seq[com.twitter.zipkin.thriftscala.Trace], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Seq[com.twitter.zipkin.thriftscala.Trace], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRUCT, success_item.size))
        success_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = success_item.size
            while (_i < _size) {
              val success_item_element = success_item(_i)
              success_item_element.write(_oprot)
              _i += 1
            }
          case _ =>
            success_item.foreach { success_item_element =>
              success_item_element.write(_oprot)
            }
        }
        _oprot.writeListEnd()
      }
    
      @inline private def readQeValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.QueryException = {
        com.twitter.zipkin.thriftscala.QueryException.decode(_iprot)
      }
    
      @inline private def writeQeField(qe_item: com.twitter.zipkin.thriftscala.QueryException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(QeField)
        writeQeValue(qe_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeQeValue(qe_item: com.twitter.zipkin.thriftscala.QueryException, _oprot: TProtocol): Unit = {
        qe_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]],
        val qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Seq[com.twitter.zipkin.thriftscala.Trace]] with ThriftStruct
      with scala.Product2[Option[Seq[com.twitter.zipkin.thriftscala.Trace]], Option[com.twitter.zipkin.thriftscala.QueryException]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
      ) = this(
        success,
        qe,
        Map.empty
      )
    
      def _1 = success
      def _2 = qe
    
      def successField: Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(qe)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (qe.isDefined) writeQeField(qe.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = this.success,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = this.qe,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          qe,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.qe
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    val name = "getTracesByIds"
    val serviceName = "ZipkinQuery"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getTracesByIds$args = GetTracesByIds.Args
  type getTracesByIds$args = GetTracesByIds.Args

  val getTracesByIds$result = GetTracesByIds.Result
  type getTracesByIds$result = GetTracesByIds.Result

  object GetTraces extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getTraces_args")
      val RequestField = new TField("request", TType.STRUCT, 1)
      val RequestFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.QueryRequest]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          RequestField,
          false,
          false,
          RequestFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          request =
            {
              val field = original.request
              com.twitter.zipkin.thriftscala.QueryRequest.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var request: com.twitter.zipkin.thriftscala.QueryRequest = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    request = readRequestValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'request' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          request,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        request: com.twitter.zipkin.thriftscala.QueryRequest
      ): Args =
        new Args(
          request
        )
    
      def unapply(_item: Args): _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryRequest] = _root_.scala.Some(_item.request)
    
    
      @inline private def readRequestValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.QueryRequest = {
        com.twitter.zipkin.thriftscala.QueryRequest.decode(_iprot)
      }
    
      @inline private def writeRequestField(request_item: com.twitter.zipkin.thriftscala.QueryRequest, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(RequestField)
        writeRequestValue(request_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeRequestValue(request_item: com.twitter.zipkin.thriftscala.QueryRequest, _oprot: TProtocol): Unit = {
        request_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val request: com.twitter.zipkin.thriftscala.QueryRequest,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product1[com.twitter.zipkin.thriftscala.QueryRequest]
      with java.io.Serializable
    {
      import Args._
      def this(
        request: com.twitter.zipkin.thriftscala.QueryRequest
      ) = this(
        request,
        Map.empty
      )
    
      def _1 = request
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (request ne null) writeRequestField(request, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        request: com.twitter.zipkin.thriftscala.QueryRequest = this.request,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          request,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.request
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = Seq[com.twitter.zipkin.thriftscala.Trace]
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getTraces_result")
      val SuccessField = new TField("success", TType.LIST, 0)
      val SuccessFieldManifest = implicitly[Manifest[Seq[com.twitter.zipkin.thriftscala.Trace]]]
      val QeField = new TField("qe", TType.STRUCT, 1)
      val QeFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.QueryException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[com.twitter.zipkin.thriftscala.Trace]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          QeField,
          true,
          false,
          QeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field.map { field =>
                  com.twitter.zipkin.thriftscala.Trace.withoutPassthroughFields(field)
                }
              }
            },
          qe =
            {
              val field = original.qe
              field.map { field =>
                com.twitter.zipkin.thriftscala.QueryException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = _root_.scala.None
        var qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.LIST =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    qe = _root_.scala.Some(readQeValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'qe' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          qe,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          qe
        )
    
      def unapply(_item: Result): _root_.scala.Option[scala.Product2[Option[Seq[com.twitter.zipkin.thriftscala.Trace]], Option[com.twitter.zipkin.thriftscala.QueryException]]] = _root_.scala.Some(_item)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Seq[com.twitter.zipkin.thriftscala.Trace] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[com.twitter.zipkin.thriftscala.Trace](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              com.twitter.zipkin.thriftscala.Trace.decode(_iprot)
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeSuccessField(success_item: Seq[com.twitter.zipkin.thriftscala.Trace], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Seq[com.twitter.zipkin.thriftscala.Trace], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRUCT, success_item.size))
        success_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = success_item.size
            while (_i < _size) {
              val success_item_element = success_item(_i)
              success_item_element.write(_oprot)
              _i += 1
            }
          case _ =>
            success_item.foreach { success_item_element =>
              success_item_element.write(_oprot)
            }
        }
        _oprot.writeListEnd()
      }
    
      @inline private def readQeValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.QueryException = {
        com.twitter.zipkin.thriftscala.QueryException.decode(_iprot)
      }
    
      @inline private def writeQeField(qe_item: com.twitter.zipkin.thriftscala.QueryException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(QeField)
        writeQeValue(qe_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeQeValue(qe_item: com.twitter.zipkin.thriftscala.QueryException, _oprot: TProtocol): Unit = {
        qe_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]],
        val qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Seq[com.twitter.zipkin.thriftscala.Trace]] with ThriftStruct
      with scala.Product2[Option[Seq[com.twitter.zipkin.thriftscala.Trace]], Option[com.twitter.zipkin.thriftscala.QueryException]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
      ) = this(
        success,
        qe,
        Map.empty
      )
    
      def _1 = success
      def _2 = qe
    
      def successField: Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(qe)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (qe.isDefined) writeQeField(qe.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Seq[com.twitter.zipkin.thriftscala.Trace]] = this.success,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = this.qe,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          qe,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.qe
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    val name = "getTraces"
    val serviceName = "ZipkinQuery"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getTraces$args = GetTraces.Args
  type getTraces$args = GetTraces.Args

  val getTraces$result = GetTraces.Result
  type getTraces$result = GetTraces.Result

  object GetServiceNames extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getServiceNames_args")
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
      ): Args =
        new Args(
        )
    
      def unapply(_item: Args): Boolean = true
    
    
    
    }
    
    class Args(
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product
      with java.io.Serializable
    {
      import Args._
      def this(
      ) = this(
        Map.empty
      )
    
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 0
    
      override def productElement(n: Int): Any = n match {
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = Set[String]
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getServiceNames_result")
      val SuccessField = new TField("success", TType.SET, 0)
      val SuccessFieldManifest = implicitly[Manifest[Set[String]]]
      val QeField = new TField("qe", TType.STRUCT, 1)
      val QeFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.QueryException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[String]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          QeField,
          true,
          false,
          QeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field.map { field =>
                  field
                }
              }
            },
          qe =
            {
              val field = original.qe
              field.map { field =>
                com.twitter.zipkin.thriftscala.QueryException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Set[String]] = _root_.scala.None
        var qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.SET =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.SET
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    qe = _root_.scala.Some(readQeValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'qe' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          qe,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Set[String]] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          qe
        )
    
      def unapply(_item: Result): _root_.scala.Option[scala.Product2[Option[Set[String]], Option[com.twitter.zipkin.thriftscala.QueryException]]] = _root_.scala.Some(_item)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Set[String] = {
        val _set = _iprot.readSetBegin()
        if (_set.size == 0) {
          _iprot.readSetEnd()
          Set.empty[String]
        } else {
          val _rv = new mutable$HashSet[String]
          var _i = 0
          while (_i < _set.size) {
            _rv += {
              _iprot.readString()
            }
            _i += 1
          }
          _iprot.readSetEnd()
          _rv
        }
      }
    
      @inline private def writeSuccessField(success_item: Set[String], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Set[String], _oprot: TProtocol): Unit = {
        _oprot.writeSetBegin(new TSet(TType.STRING, success_item.size))
        success_item.foreach { success_item_element =>
          _oprot.writeString(success_item_element)
        }
        _oprot.writeSetEnd()
      }
    
      @inline private def readQeValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.QueryException = {
        com.twitter.zipkin.thriftscala.QueryException.decode(_iprot)
      }
    
      @inline private def writeQeField(qe_item: com.twitter.zipkin.thriftscala.QueryException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(QeField)
        writeQeValue(qe_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeQeValue(qe_item: com.twitter.zipkin.thriftscala.QueryException, _oprot: TProtocol): Unit = {
        qe_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Set[String]],
        val qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Set[String]] with ThriftStruct
      with scala.Product2[Option[Set[String]], Option[com.twitter.zipkin.thriftscala.QueryException]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Set[String]] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
      ) = this(
        success,
        qe,
        Map.empty
      )
    
      def _1 = success
      def _2 = qe
    
      def successField: Option[Set[String]] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(qe)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (qe.isDefined) writeQeField(qe.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Set[String]] = this.success,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = this.qe,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          qe,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.qe
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    val name = "getServiceNames"
    val serviceName = "ZipkinQuery"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getServiceNames$args = GetServiceNames.Args
  type getServiceNames$args = GetServiceNames.Args

  val getServiceNames$result = GetServiceNames.Result
  type getServiceNames$result = GetServiceNames.Result

  object GetSpanNames extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getSpanNames_args")
      val ServiceNameField = new TField("service_name", TType.STRING, 1)
      val ServiceNameFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          ServiceNameField,
          false,
          false,
          ServiceNameFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          serviceName =
            {
              val field = original.serviceName
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var serviceName: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    serviceName = readServiceNameValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'serviceName' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          serviceName,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        serviceName: String
      ): Args =
        new Args(
          serviceName
        )
    
      def unapply(_item: Args): _root_.scala.Option[String] = _root_.scala.Some(_item.serviceName)
    
    
      @inline private def readServiceNameValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeServiceNameField(serviceName_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ServiceNameField)
        writeServiceNameValue(serviceName_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeServiceNameValue(serviceName_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(serviceName_item)
      }
    
    
    }
    
    class Args(
        val serviceName: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product1[String]
      with java.io.Serializable
    {
      import Args._
      def this(
        serviceName: String
      ) = this(
        serviceName,
        Map.empty
      )
    
      def _1 = serviceName
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (serviceName ne null) writeServiceNameField(serviceName, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        serviceName: String = this.serviceName,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          serviceName,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.serviceName
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = Set[String]
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getSpanNames_result")
      val SuccessField = new TField("success", TType.SET, 0)
      val SuccessFieldManifest = implicitly[Manifest[Set[String]]]
      val QeField = new TField("qe", TType.STRUCT, 1)
      val QeFieldManifest = implicitly[Manifest[com.twitter.zipkin.thriftscala.QueryException]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[String]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          QeField,
          true,
          false,
          QeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field.map { field =>
                  field
                }
              }
            },
          qe =
            {
              val field = original.qe
              field.map { field =>
                com.twitter.zipkin.thriftscala.QueryException.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Set[String]] = _root_.scala.None
        var qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.SET =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.SET
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    qe = _root_.scala.Some(readQeValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'qe' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          qe,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Set[String]] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          qe
        )
    
      def unapply(_item: Result): _root_.scala.Option[scala.Product2[Option[Set[String]], Option[com.twitter.zipkin.thriftscala.QueryException]]] = _root_.scala.Some(_item)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): Set[String] = {
        val _set = _iprot.readSetBegin()
        if (_set.size == 0) {
          _iprot.readSetEnd()
          Set.empty[String]
        } else {
          val _rv = new mutable$HashSet[String]
          var _i = 0
          while (_i < _set.size) {
            _rv += {
              _iprot.readString()
            }
            _i += 1
          }
          _iprot.readSetEnd()
          _rv
        }
      }
    
      @inline private def writeSuccessField(success_item: Set[String], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Set[String], _oprot: TProtocol): Unit = {
        _oprot.writeSetBegin(new TSet(TType.STRING, success_item.size))
        success_item.foreach { success_item_element =>
          _oprot.writeString(success_item_element)
        }
        _oprot.writeSetEnd()
      }
    
      @inline private def readQeValue(_iprot: TProtocol): com.twitter.zipkin.thriftscala.QueryException = {
        com.twitter.zipkin.thriftscala.QueryException.decode(_iprot)
      }
    
      @inline private def writeQeField(qe_item: com.twitter.zipkin.thriftscala.QueryException, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(QeField)
        writeQeValue(qe_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeQeValue(qe_item: com.twitter.zipkin.thriftscala.QueryException, _oprot: TProtocol): Unit = {
        qe_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Set[String]],
        val qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Set[String]] with ThriftStruct
      with scala.Product2[Option[Set[String]], Option[com.twitter.zipkin.thriftscala.QueryException]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[Set[String]] = _root_.scala.None,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = _root_.scala.None
      ) = this(
        success,
        qe,
        Map.empty
      )
    
      def _1 = success
      def _2 = qe
    
      def successField: Option[Set[String]] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(qe)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (qe.isDefined) writeQeField(qe.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Set[String]] = this.success,
        qe: _root_.scala.Option[com.twitter.zipkin.thriftscala.QueryException] = this.qe,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          qe,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case 1 => this.qe
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    val name = "getSpanNames"
    val serviceName = "ZipkinQuery"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getSpanNames$args = GetSpanNames.Args
  type getSpanNames$args = GetSpanNames.Args

  val getSpanNames$result = GetSpanNames.Result
  type getSpanNames$result = GetSpanNames.Result


  trait FutureIface extends ZipkinQuery[Future] {
    
    def getTracesByIds(traceIds: Seq[Long] = Seq[Long](), adjustClockSkew: Boolean = true): Future[Seq[com.twitter.zipkin.thriftscala.Trace]]
    
    def getTraces(request: com.twitter.zipkin.thriftscala.QueryRequest): Future[Seq[com.twitter.zipkin.thriftscala.Trace]]
    /**
         * Fetch all the service names we have seen from now all the way back to the set ttl.
         */
    def getServiceNames(): Future[Set[String]]
    /**
         * Get all the seen span names for a particular service, from now back until the set ttl.
         */
    def getSpanNames(serviceName: String): Future[Set[String]]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "ZipkinQuery",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver)
    extends ZipkinQuery$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats)
    with FutureIface

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends ZipkinQuery$FinagleService(
      iface,
      protocolFactory)
}